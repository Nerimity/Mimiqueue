import{Queue as y}from"async-await-queue";var l=class{addQueue=new y(1);redisClient;name;prefix="mimiqueue";ids=new Map;sub;processFn;constructor(n){this.processFn=n.process,this.name=n.name,this.redisClient=n.redisClient,this.sub=this.redisClient.duplicate(),this.sub.connect(),this.sub.subscribe("mimiqueue",async e=>{let t=JSON.parse(e);if(t[0]==="start"&&this.startJob(t[1],t[2],t[3]),t[0]==="finish"){if(this.name!==t[1]||!this.ids.delete(t[2]))return;let s=await J(this,t[3]);if(!s)return;let r=JSON.stringify(["start",this.name,s.id,t[3]]);this.redisClient.publish("mimiqueue",r)}})}async startJob(n,e,t){if(n!==this.name)return;let s=this.ids.get(e);if(!s)return;let r=await f(this,e,t),a=JSON.parse(r.data||"null");await this.processFn(a).then(o=>s[0](o)).catch(o=>s[1](o)),await w(this,e,t),this.redisClient.publish("mimiqueue",JSON.stringify(["finish",n,e,t]))}async add(n,e){let t=await this.addQueue.run(async()=>{let s=await $(this,n,e?.groupName),r=await p(this,e?.groupName);if(r&&await b(this,s,e?.groupName),!r){await d(this,s,e?.groupName);let a=JSON.stringify(["start",this.name,s.toString(),e?.groupName]);this.redisClient.publish("mimiqueue",a)}return s});return new Promise((s,r)=>{this.ids.set(t.toString(),[s,r])})}};async function g(i){return await i.redisClient.incr(`${i.prefix}:${i.name}:id`)}async function $(i,n,e){let t=await g(i),s=`${i.prefix}:${i.name}`;return e&&(s+=`:${e}`),s+=`:${t}`,await i.redisClient.hSet(s,{data:JSON.stringify(n),createdAt:Date.now()}),t}function b(i,n,e){let t=`${i.prefix}:${i.name}`;return e&&(t+=`:${e}`),t+=":wait",i.redisClient.rPush(t,n.toString())}function d(i,n,e){let t=`${i.prefix}:${i.name}`;return e&&(t+=`:${e}`),t+=":active",i.redisClient.set(t,n.toString())}async function p(i,n){let e=`${i.prefix}:${i.name}`;n&&(e+=`:${n}`);let t=i.redisClient.multi();t.get(`${e}:active`),t.lLen(`${e}:wait`);let[s,r]=await t.exec();return(s?1:0)+r}async function f(i,n,e){let t=`${i.prefix}:${i.name}`;return e&&(t+=`:${e}`),i.redisClient.hGetAll(`${t}:${n.toString()}`)}async function w(i,n,e){let t=`${i.prefix}:${i.name}`;e&&(t+=`:${e}`),t+=":active";let s=`${i.prefix}:${i.name}`;e&&(s+=`:${e}`),s+=`:${n}`;let r=i.redisClient.multi();return r.del(t),r.del(s),r.exec()}async function C(i,n,e){let t=`${i.prefix}:${i.name}`;return e&&(t+=`:${e}`),t+=":wait",i.redisClient.lRem(t,1,n.toString())}async function J(i,n){let e=`${i.prefix}:${i.name}`;n&&(e+=`:${n}`),e+=":wait";let t=await i.redisClient.lIndex(e,0);if(!t)return null;let s=f(i,t,n);return s?(await C(i,t,n),await d(i,t,n),{job:s,id:t}):null}import{Queue as x}from"async-await-queue";var c=class{addQueue=new x(1);redisClient;name;prefix="mimiqueue";ids=new Map;sub;constructor(n){this.name=n.name,this.redisClient=n.redisClient,this.sub=this.redisClient.duplicate(),this.sub.connect(),this.sub.subscribe("mimiqueue",async e=>{let t=JSON.parse(e);if(t[0]==="start"&&this.startJob(t[1],t[2],t[3]),t[0]==="finish"){if(this.name!==t[1]||!this.ids.delete(t[2]))return;let s=await R(this,t[3]);if(!s)return;let r=JSON.stringify(["start",this.name,s.id,t[3]]);this.redisClient.publish("mimiqueue",r)}})}async startJob(n,e,t){if(n!==this.name)return;let s=this.ids.get(e);s&&s()}async start(n){let e=await this.addQueue.run(async()=>{let t=await v(this,n?.groupName),s=await A(this,n?.groupName);if(s&&await S(this,t,n?.groupName),!s){await u(this,t,n?.groupName);let r=JSON.stringify(["start",this.name,t.toString(),n?.groupName]);this.redisClient.publish("mimiqueue",r)}return t});return new Promise(t=>{this.ids.set(e.toString(),()=>t(async()=>{if(!this.ids.get(e.toString()))return;let r=e.toString();await T(this,r,n?.groupName),this.redisClient.publish("mimiqueue",JSON.stringify(["finish",this.name,r,n?.groupName]))}))})}};async function Q(i){return await i.redisClient.incr(`${i.prefix}:${i.name}:id`)}async function v(i,n){let e=await Q(i),t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),t+=`:${e}`,await i.redisClient.hSet(t,{createdAt:Date.now()}),e}function S(i,n,e){let t=`${i.prefix}:${i.name}`;return e&&(t+=`:${e}`),t+=":wait",i.redisClient.rPush(t,n.toString())}function u(i,n,e){let t=`${i.prefix}:${i.name}`;return e&&(t+=`:${e}`),t+=":active",i.redisClient.set(t,n.toString())}async function A(i,n){let e=`${i.prefix}:${i.name}`;n&&(e+=`:${n}`);let t=i.redisClient.multi();t.get(`${e}:active`),t.lLen(`${e}:wait`);let[s,r]=await t.exec();return(s?1:0)+r}async function O(i,n,e){let t=`${i.prefix}:${i.name}`;return e&&(t+=`:${e}`),i.redisClient.hGetAll(`${t}:${n.toString()}`)}async function T(i,n,e){let t=`${i.prefix}:${i.name}`;e&&(t+=`:${e}`),t+=":active";let s=`${i.prefix}:${i.name}`;e&&(s+=`:${e}`),s+=`:${n}`;let r=i.redisClient.multi();return r.del(t),r.del(s),r.exec()}async function k(i,n,e){let t=`${i.prefix}:${i.name}`;return e&&(t+=`:${e}`),t+=":wait",i.redisClient.lRem(t,1,n.toString())}async function R(i,n){let e=`${i.prefix}:${i.name}`;n&&(e+=`:${n}`),e+=":wait";let t=await i.redisClient.lIndex(e,0);if(!t)return null;let s=O(i,t,n);return s?(await k(i,t,n),await u(i,t,n),{job:s,id:t}):null}var m=class{_altQueue;constructor(n){this._altQueue=new c(n)}async add(n,e){let t=await this._altQueue.start(e);n().catch(s=>{console.error(s)}).finally(()=>{t()})}};var h=new Map;async function _(i){let n=i.redisClient,e=n.duplicate();await e.connect(),e.subscribe("mimiqueue",async t=>{let s=JSON.parse(t);if(s[0]==="start"){let r=s[1],a=s[2];h.set(`${r}${a}`,setTimeout(()=>{let o=["finish",s[1],s[2],s[3]];n.publish("mimiqueue",JSON.stringify(o))},i.duration||3e4))}if(s[0]==="finish"){let r=s[1],a=s[2];h.delete(`${r}${a}`)}})}export{c as AltQueue,m as AltQueue2,l as Queue,_ as handleTimeout};
//# sourceMappingURL=index.mjs.map