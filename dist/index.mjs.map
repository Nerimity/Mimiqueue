{"version":3,"sources":["../src/utils.ts","../src/createQueue.ts","../src/createQueueProcessor.ts"],"sourcesContent":["export function key (...args: any[]) {\r\n  return args.filter(Boolean).join(\":\");\r\n}","import { RedisClient } from \"./types\";\r\nimport { key } from \"./utils\";\r\n\r\ninterface createQueueOpts<T = () => any> {\r\n  redisClient: RedisClient;\r\n  name: string;\r\n}\r\n\r\ninterface AddOpts {\r\n  groupName?: string;\r\n}\r\n\r\n\r\nconst generateId = (redisClient: RedisClient, name?: string) =>  {\r\n  return redisClient.incr(`mq:${name}:count`);\r\n}\r\n\r\nexport const createQueue = (opts: createQueueOpts) => {\r\n\r\n  const localWaitList = new Map<string, any>();\r\n\r\n  // opts.redisClient.subscribe(\"mq:\" + opts.name, (channel, message) => {\r\n  //   console.log(message);\r\n  // });\r\n\r\n  const add = async <T extends () => any>(\r\n    func: T,\r\n    addOpts?: AddOpts\r\n  ) => {\r\n\r\n    const id = await generateId(opts.redisClient, opts.name);\r\n  \r\n    await opts.redisClient.sAdd(\r\n      key(\"mq\", opts.name, addOpts?.groupName, \"wait\"),\r\n      id.toString(),\r\n    )\r\n\r\n    \r\n    return new Promise<Awaited<ReturnType<T>>>((resolve, reject) => {\r\n      localWaitList.set(id.toString(), () => resolve(func()));\r\n      console.log(id)\r\n      opts.redisClient.publish(\"mq\", JSON.stringify({\r\n        id,\r\n        groupName: addOpts?.groupName,\r\n        name: opts.name\r\n      }));\r\n    })\r\n  };\r\n\r\n  return {\r\n    add,\r\n  };\r\n};\r\n\r\n\r\n\r\n","import { RedisClient } from \"./types\";\r\n\r\ninterface CreateQueueProcessorOpts {\r\n  redisClient: RedisClient;\r\n}\r\n/**\r\n *  This function should be ran in the main thread.\r\n *\r\n */\r\nexport const createQueueProcessor = (opts: CreateQueueProcessorOpts) => {\r\n  const redisClient = opts.redisClient;\r\n  redisClient.subscribe(\"mq\", ( message) => {\r\n    const data = JSON.parse(message);\r\n    console.log(data)\r\n  });\r\n};\r\n"],"mappings":"AAAO,SAASA,KAAQC,EAAa,CACnC,OAAOA,EAAK,OAAO,OAAO,EAAE,KAAK,GAAG,CACtC,CCWA,IAAMC,EAAa,CAACC,EAA0BC,IACrCD,EAAY,KAAK,MAAMC,CAAI,QAAQ,EAG/BC,EAAeC,GAA0B,CAEpD,IAAMC,EAAgB,IAAI,IA8B1B,MAAO,CACL,IAzBU,MACVC,EACAC,IACG,CAEH,IAAMC,EAAK,MAAMR,EAAWI,EAAK,YAAaA,EAAK,IAAI,EAEvD,aAAMA,EAAK,YAAY,KACrBK,EAAI,KAAML,EAAK,KAAMG,GAAS,UAAW,MAAM,EAC/CC,EAAG,SAAS,CACd,EAGO,IAAI,QAAgC,CAACE,EAASC,IAAW,CAC9DN,EAAc,IAAIG,EAAG,SAAS,EAAG,IAAME,EAAQJ,EAAK,CAAC,CAAC,EACtD,QAAQ,IAAIE,CAAE,EACdJ,EAAK,YAAY,QAAQ,KAAM,KAAK,UAAU,CAC5C,GAAAI,EACA,UAAWD,GAAS,UACpB,KAAMH,EAAK,IACb,CAAC,CAAC,CACJ,CAAC,CACH,CAIA,CACF,EC3CO,IAAMQ,EAAwBC,GAAmC,CAClDA,EAAK,YACb,UAAU,KAAQC,GAAY,CACxC,IAAMC,EAAO,KAAK,MAAMD,CAAO,EAC/B,QAAQ,IAAIC,CAAI,CAClB,CAAC,CACH","names":["key","args","generateId","redisClient","name","createQueue","opts","localWaitList","func","addOpts","id","key","resolve","reject","createQueueProcessor","opts","message","data"]}