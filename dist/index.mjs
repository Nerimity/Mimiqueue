function i(...e){return e.filter(Boolean).join(":")}var u=async(e,n)=>(await e.incr(`mq:${n}:count`)).toString(),m=e=>{let n=new Map,r=e.redisClient.duplicate(),t=e.redisClient.duplicate();return r.subscribe("mq",a=>{console.log(a)}),{add:async(a,c)=>{r.isOpen||await r.connect(),t.isOpen||await t.connect();let s=await u(t,e.name);return await t.sAdd(i("mq",e.name,c?.groupName,"wait"),s),new Promise((d,l)=>{n.set(s.toString(),()=>d(a())),t.publish("mq",JSON.stringify({event:"add",name:e.name,groupName:c?.groupName,id:s}))})}}};var p=e=>{let n=e.redisClient;n.subscribe("mq",r=>{let t=JSON.parse(r);if(t.event==="add"){let o=i("mq",t.name,t.groupName,"active");n.sAdd(o,t.id)}})};export{m as createQueue,p as createQueueProcessor};
//# sourceMappingURL=index.mjs.map