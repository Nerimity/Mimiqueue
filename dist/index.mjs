import{Queue as h}from"async-await-queue";var l=class{addQueue=new h(1);redisClient;name;prefix="mimiqueue";ids=new Map;sub;processFn;constructor(e){this.processFn=e.process,this.name=e.name,this.redisClient=e.redisClient,this.sub=this.redisClient.duplicate(),this.sub.connect(),this.sub.subscribe("mimiqueue",async n=>{let t=JSON.parse(n);if(t[0]==="start"&&this.startJob(t[1],t[2],t[3]),t[0]==="finish"){if(this.name!==t[1]||!this.ids.delete(t[2]))return;let s=await C(this,t[3]);if(!s)return;let r=JSON.stringify(["start",this.name,s.id,t[3]]);this.redisClient.publish("mimiqueue",r)}})}async startJob(e,n,t){if(e!==this.name)return;let s=this.ids.get(n);if(!s)return;let r=await f(this,n,t),o=JSON.parse(r.data||"null");await this.processFn(o).then(c=>s[0](c)).catch(c=>s[1](c)),await w(this,n,t),this.redisClient.publish("mimiqueue",JSON.stringify(["finish",e,n,t]))}async add(e,n){let t=await this.addQueue.run(async()=>{let s=await y(this,e,n?.groupName),r=await b(this,n?.groupName);if(r&&await $(this,s,n?.groupName),!r){await d(this,s,n?.groupName);let o=JSON.stringify(["start",this.name,s.toString(),n?.groupName]);this.redisClient.publish("mimiqueue",o)}return s});return new Promise((s,r)=>{this.ids.set(t.toString(),[s,r])})}};async function g(i){return await i.redisClient.incr(`${i.prefix}:${i.name}:id`)}async function y(i,e,n){let t=await g(i),s=`${i.prefix}:${i.name}`;return n&&(s+=`:${n}`),s+=`:${t}`,await i.redisClient.hSet(s,{data:JSON.stringify(e),createdAt:Date.now()}),t}function $(i,e,n){let t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),t+=":wait",i.redisClient.rPush(t,e.toString())}function d(i,e,n){let t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),t+=":active",i.redisClient.set(t,e.toString())}async function b(i,e){let n=`${i.prefix}:${i.name}`;e&&(n+=`:${e}`);let t=i.redisClient.multi();t.get(`${n}:active`),t.lLen(`${n}:wait`);let[s,r]=await t.exec();return(s?1:0)+r}async function f(i,e,n){let t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),i.redisClient.hGetAll(`${t}:${e.toString()}`)}async function w(i,e,n){let t=`${i.prefix}:${i.name}`;n&&(t+=`:${n}`),t+=":active";let s=`${i.prefix}:${i.name}`;n&&(s+=`:${n}`),s+=`:${e}`;let r=i.redisClient.multi();return r.del(t),r.del(s),r.exec()}async function p(i,e,n){let t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),t+=":wait",i.redisClient.lRem(t,1,e.toString())}async function C(i,e){let n=`${i.prefix}:${i.name}`;e&&(n+=`:${e}`),n+=":wait";let t=await i.redisClient.lIndex(n,0);if(!t)return null;let s=f(i,t,e);return s?(await p(i,t,e),await d(i,t,e),{job:s,id:t}):null}import{Queue as x}from"async-await-queue";var a=class{addQueue=new x(1);redisClient;name;prefix="mimiqueue";ids=new Map;sub;constructor(e){this.name=e.name,this.redisClient=e.redisClient,this.sub=this.redisClient.duplicate(),this.sub.connect(),this.sub.subscribe("mimiqueue",async n=>{let t=JSON.parse(n);if(t[0]==="start"&&this.startJob(t[1],t[2],t[3]),t[0]==="finish"){if(this.name!==t[1]||!this.ids.delete(t[2]))return;let s=await T(this,t[3]);if(!s)return;let r=JSON.stringify(["start",this.name,s.id,t[3]]);this.redisClient.publish("mimiqueue",r)}})}async startJob(e,n,t){if(e!==this.name)return;let s=this.ids.get(n);s&&s()}async start(e){let n=await this.addQueue.run(async()=>{let t=await Q(this,e?.groupName),s=await A(this,e?.groupName);if(s&&await v(this,t,e?.groupName),!s){await m(this,t,e?.groupName);let r=JSON.stringify(["start",this.name,t.toString(),e?.groupName]);this.redisClient.publish("mimiqueue",r)}return t});return new Promise(t=>{this.ids.set(n.toString(),()=>t(async()=>{if(!this.ids.get(n.toString()))return;let r=n.toString();await O(this,r,e?.groupName),this.redisClient.publish("mimiqueue",JSON.stringify(["finish",this.name,r,e?.groupName]))}))})}};async function J(i){return await i.redisClient.incr(`${i.prefix}:${i.name}:id`)}async function Q(i,e){let n=await J(i),t=`${i.prefix}:${i.name}`;return e&&(t+=`:${e}`),t+=`:${n}`,await i.redisClient.hSet(t,{createdAt:Date.now()}),n}function v(i,e,n){let t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),t+=":wait",i.redisClient.rPush(t,e.toString())}function m(i,e,n){let t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),t+=":active",i.redisClient.set(t,e.toString())}async function A(i,e){let n=`${i.prefix}:${i.name}`;e&&(n+=`:${e}`);let t=i.redisClient.multi();t.get(`${n}:active`),t.lLen(`${n}:wait`);let[s,r]=await t.exec();return(s?1:0)+r}async function S(i,e,n){let t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),i.redisClient.hGetAll(`${t}:${e.toString()}`)}async function O(i,e,n){let t=`${i.prefix}:${i.name}`;n&&(t+=`:${n}`),t+=":active";let s=`${i.prefix}:${i.name}`;n&&(s+=`:${n}`),s+=`:${e}`;let r=i.redisClient.multi();return r.del(t),r.del(s),r.exec()}async function k(i,e,n){let t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),t+=":wait",i.redisClient.lRem(t,1,e.toString())}async function T(i,e){let n=`${i.prefix}:${i.name}`;e&&(n+=`:${e}`),n+=":wait";let t=await i.redisClient.lIndex(n,0);if(!t)return null;let s=S(i,t,e);return s?(await k(i,t,e),await m(i,t,e),{job:s,id:t}):null}var u=class{_altQueue;constructor(e){this._altQueue=new a(e)}async add(e,n){let t=await this._altQueue.start(n);e().catch(s=>{console.error(s)}).finally(()=>{t()})}};export{a as AltQueue,u as AltQueue2,l as Queue};
//# sourceMappingURL=index.mjs.map