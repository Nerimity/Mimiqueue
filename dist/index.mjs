import{Queue as f}from"async-await-queue";var o=class{addQueue=new f(1);redisClient;name;prefix="mimiqueue";ids=new Map;sub;processFn;constructor(e){this.processFn=e.process,this.name=e.name,this.redisClient=e.redisClient,this.sub=this.redisClient.duplicate(),this.sub.connect(),this.sub.subscribe("mimiqueue",async n=>{let t=JSON.parse(n);if(t[0]==="start"&&this.startJob(t[1],t[2],t[3]),t[0]==="finish"){if(this.name!==t[1]||!this.ids.delete(t[2]))return;let s=await b(this,t[3]);if(!s)return;let r=JSON.stringify(["start",this.name,s.id,t[3]]);this.redisClient.publish("mimiqueue",r)}})}async startJob(e,n,t){if(e!==this.name)return;let s=this.ids.get(n);if(!s)return;let r=await d(this,n,t),a=JSON.parse(r.data||"null");await this.processFn(a).then(c=>s[0](c)).catch(c=>s[1](c)),await u(this,n,t),this.redisClient.publish("mimiqueue",JSON.stringify(["finish",e,n,t]))}async add(e,n){let t=await this.addQueue.run(async()=>{let s=await $(this,e,n?.groupName),r=await m(this,n?.groupName);if(r&&await h(this,s,n?.groupName),!r){await l(this,s,n?.groupName);let a=JSON.stringify(["start",this.name,s.toString(),n?.groupName]);this.redisClient.publish("mimiqueue",a)}return s});return new Promise((s,r)=>{this.ids.set(t.toString(),[s,r])})}};async function y(i){return await i.redisClient.incr(`${i.prefix}:${i.name}:id`)}async function $(i,e,n){let t=await y(i),s=`${i.prefix}:${i.name}`;return n&&(s+=`:${n}`),s+=`:${t}`,await i.redisClient.hSet(s,{data:JSON.stringify(e),createdAt:Date.now()}),t}function h(i,e,n){let t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),t+=":wait",i.redisClient.rPush(t,e.toString())}function l(i,e,n){let t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),t+=":active",i.redisClient.rPush(t,e.toString())}async function m(i,e){let n=`${i.prefix}:${i.name}`;e&&(n+=`:${e}`);let t=i.redisClient.multi();t.lLen(`${n}:active`),t.lLen(`${n}:wait`);let[s,r]=await t.exec();return s+r}async function d(i,e,n){let t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),i.redisClient.hGetAll(`${t}:${e.toString()}`)}async function u(i,e,n){let t=`${i.prefix}:${i.name}`;n&&(t+=`:${n}`),t+=":active";let s=`${i.prefix}:${i.name}`;n&&(s+=`:${n}`),s+=`:${e}`;let r=i.redisClient.multi();return r.lRem(t,1,e.toString()),r.del(s),r.exec()}async function g(i,e,n){let t=`${i.prefix}:${i.name}`;return n&&(t+=`:${n}`),t+=":wait",i.redisClient.lRem(t,1,e.toString())}async function b(i,e){let n=`${i.prefix}:${i.name}`;e&&(n+=`:${e}`),n+=":wait";let t=await i.redisClient.lIndex(n,0);if(!t)return null;let s=d(i,t,e);return s?(await g(i,t,e),await l(i,t,e),{job:s,id:t}):null}export{o as Queue};
//# sourceMappingURL=index.mjs.map