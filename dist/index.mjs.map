{"version":3,"sources":["../src/Queue.ts"],"sourcesContent":["import { createClient } from \"redis\";\r\nimport { Queue as MemoryQueue } from \"async-await-queue\";\r\n\r\ntype RedisClient = ReturnType<typeof createClient>;\r\n\r\ninterface QueueOpts<T> {\r\n  name: string;\r\n  redisClient: RedisClient;\r\n  process: T;\r\n}\r\nexport class Queue<\r\n  T extends (data: any) => Promise<any> = (data: any) => Promise<any>\r\n> {\r\n  addQueue = new MemoryQueue(1);\r\n\r\n  redisClient: RedisClient;\r\n  name: string;\r\n  prefix = \"mimiqueue\";\r\n  ids: Map<string, [any, any]> = new Map();\r\n  sub: RedisClient;\r\n  processFn: T;\r\n  constructor(opts: QueueOpts<T>) {\r\n    this.processFn = opts.process;\r\n    this.name = opts.name;\r\n    this.redisClient = opts.redisClient;\r\n    this.sub = this.redisClient.duplicate();\r\n    this.sub.connect();\r\n\r\n    this.sub.subscribe(\"mimiqueue\", async (message) => {\r\n      const payload = JSON.parse(message) as [\r\n        \"start\" | \"finish\",\r\n        string,\r\n        string,\r\n        string\r\n      ]; // [action, name, id, groupName?]\r\n\r\n      if (payload[0] === \"start\") {\r\n        this.startJob(payload[1], payload[2], payload[3]);\r\n      }\r\n\r\n      if (payload[0] === \"finish\") {\r\n        if (this.name !== payload[1]) return;\r\n        if (!this.ids.delete(payload[2])) return;\r\n\r\n        const latestJob = await getAndMoveLatestWaitingJobToActive(\r\n          this,\r\n          payload[3]\r\n        );\r\n        if (!latestJob) return;\r\n        const newPayload = JSON.stringify([\r\n          \"start\",\r\n          this.name,\r\n          latestJob.id,\r\n          payload[3],\r\n        ]);\r\n        this.redisClient.publish(\"mimiqueue\", newPayload);\r\n      }\r\n    });\r\n  }\r\n\r\n  private async startJob(name: string, id: string, groupName?: string) {\r\n    if (name !== this.name) return;\r\n    const cb = this.ids.get(id);\r\n    if (!cb) return;\r\n\r\n    const job = await getJobById(this, id, groupName);\r\n    const data = JSON.parse(job.data || \"null\");\r\n    await this.processFn(data)\r\n      .then((result: any) => {\r\n        return cb[0](result);\r\n      })\r\n      .catch((e: any) => {\r\n        return cb[1](e);\r\n      });\r\n\r\n    await removeActiveJob(this, id, groupName);\r\n    this.redisClient.publish(\r\n      \"mimiqueue\",\r\n      JSON.stringify([\"finish\", name, id, groupName])\r\n    );\r\n  }\r\n  async add(data: any, opts?: { groupName?: string }) {\r\n    const id = await this.addQueue.run(async () => {\r\n      const id = await addJob(this, data, opts?.groupName);\r\n\r\n      const hasActiveOrWaitingJobs = await activeOrWaitingJobCount(\r\n        this,\r\n        opts?.groupName\r\n      );\r\n      if (hasActiveOrWaitingJobs) {\r\n        await addJobToWaiting(this, id, opts?.groupName);\r\n      }\r\n\r\n      if (!hasActiveOrWaitingJobs) {\r\n        await addJobToActive(this, id, opts?.groupName);\r\n        const payload = JSON.stringify([\r\n          \"start\",\r\n          this.name,\r\n          id.toString(),\r\n          opts?.groupName,\r\n        ]);\r\n        this.redisClient.publish(\"mimiqueue\", payload);\r\n      }\r\n      return id;\r\n    });\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.ids.set(id.toString(), [resolve, reject]);\r\n    });\r\n  }\r\n}\r\n\r\nasync function genId(queue: Queue) {\r\n  return await queue.redisClient.incr(`${queue.prefix}:${queue.name}:id`);\r\n}\r\n\r\nasync function addJob<T>(queue: Queue, data: T, groupName?: string) {\r\n  const id = await genId(queue);\r\n\r\n  let key = `${queue.prefix}:${queue.name}`;\r\n  if (groupName) key += `:${groupName}`;\r\n  key += `:${id}`;\r\n\r\n  await queue.redisClient.hSet(key, {\r\n    data: JSON.stringify(data),\r\n    createdAt: Date.now(),\r\n  });\r\n\r\n  return id;\r\n}\r\n\r\nfunction addJobToWaiting(queue: Queue, id: number, groupName?: string) {\r\n  let key = `${queue.prefix}:${queue.name}`;\r\n  if (groupName) key += `:${groupName}`;\r\n  key += \":wait\";\r\n\r\n  return queue.redisClient.rPush(key, id.toString());\r\n}\r\n\r\nfunction waitJobCount(queue: Queue, id: number, groupName?: string) {\r\n  let key = `${queue.prefix}:${queue.name}`;\r\n  if (groupName) key += `:${groupName}`;\r\n  key += \":wait\";\r\n\r\n  return queue.redisClient.lLen(key);\r\n}\r\n\r\nfunction activeJobCount(queue: Queue, groupName?: string) {\r\n  let key = `${queue.prefix}:${queue.name}`;\r\n  if (groupName) key += `:${groupName}`;\r\n  key += \":active\";\r\n\r\n  return queue.redisClient.lLen(key);\r\n}\r\n\r\nfunction addJobToActive(queue: Queue, id: number | string, groupName?: string) {\r\n  let key = `${queue.prefix}:${queue.name}`;\r\n  if (groupName) key += `:${groupName}`;\r\n  key += \":active\";\r\n\r\n  return queue.redisClient.rPush(key, id.toString());\r\n}\r\n\r\nasync function activeOrWaitingJobCount(queue: Queue, groupName?: string) {\r\n  let key = `${queue.prefix}:${queue.name}`;\r\n  if (groupName) key += `:${groupName}`;\r\n\r\n  const multi = queue.redisClient.multi();\r\n  multi.lLen(`${key}:active`);\r\n  multi.lLen(`${key}:wait`);\r\n\r\n  const [active, wait] = (await multi.exec()) as [number, number];\r\n\r\n  return active + wait;\r\n}\r\n\r\nasync function getJobById(queue: Queue, id: string, groupName?: string) {\r\n  let key = `${queue.prefix}:${queue.name}`;\r\n  if (groupName) key += `:${groupName}`;\r\n\r\n  return queue.redisClient.hGetAll(`${key}:${id.toString()}`);\r\n}\r\nasync function removeActiveJob(queue: Queue, id: string, groupName?: string) {\r\n  let key1 = `${queue.prefix}:${queue.name}`;\r\n  if (groupName) key1 += `:${groupName}`;\r\n  key1 += \":active\";\r\n\r\n  let key2 = `${queue.prefix}:${queue.name}`;\r\n  if (groupName) key2 += `:${groupName}`;\r\n  key2 += `:${id}`;\r\n  const multi = queue.redisClient.multi();\r\n\r\n  multi.lRem(key1, 1, id.toString());\r\n  multi.del(key2);\r\n\r\n  return multi.exec();\r\n}\r\n\r\nasync function removeWaitingJob(queue: Queue, id: string, groupName?: string) {\r\n  let key = `${queue.prefix}:${queue.name}`;\r\n  if (groupName) key += `:${groupName}`;\r\n  key += \":wait\";\r\n  return queue.redisClient.lRem(key, 1, id.toString());\r\n}\r\n\r\nasync function getAndMoveLatestWaitingJobToActive(\r\n  queue: Queue,\r\n  groupName?: string\r\n) {\r\n  let key = `${queue.prefix}:${queue.name}`;\r\n  if (groupName) key += `:${groupName}`;\r\n  key += \":wait\";\r\n  const id = await queue.redisClient.lIndex(key, 0);\r\n  if (!id) return null;\r\n  const activeJob = getJobById(queue, id, groupName);\r\n  if (!activeJob) return null;\r\n\r\n  await removeWaitingJob(queue, id, groupName);\r\n  await addJobToActive(queue, id, groupName);\r\n  return { job: activeJob, id };\r\n}\r\n"],"mappings":"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","names":["MemoryQueue","Queue","opts","message","payload","latestJob","getAndMoveLatestWaitingJobToActive","newPayload","name","id","groupName","cb","job","getJobById","data","result","e","removeActiveJob","addJob","hasActiveOrWaitingJobs","activeOrWaitingJobCount","addJobToWaiting","addJobToActive","resolve","reject","genId","queue","key","addJobToActive","queue","id","groupName","key","activeOrWaitingJobCount","multi","active","wait","getJobById","removeActiveJob","key1","key2","removeWaitingJob","getAndMoveLatestWaitingJobToActive","activeJob"]}